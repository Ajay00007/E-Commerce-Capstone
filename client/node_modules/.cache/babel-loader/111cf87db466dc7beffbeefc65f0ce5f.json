{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/GithubRepos/Group_06/client/src/components/UpdateAccount.js\";\nimport React, { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Alert, Button, Card, Form } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nexport default function UpdateAccount() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmedRef = useRef();\n  const [error, setError] = useState(\"\");\n  const {\n    currentUser,\n    updatePassword,\n    updateEmail\n  } = useAuth();\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\n      return setError(\"Passwords do not match.\");\n    }\n\n    const promises = [];\n    setError(\"\");\n\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises).then(() => history.push(\"/\")).catch(() => {\n      setError(\"Failed to update account.\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Update Profile\"), error && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, error), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    ref: emailRef,\n    required: true,\n    defaultValue: currentUser.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordRef,\n    placeholder: \"Leave blank to keep the same\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"password-confirm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"Password Confirmation\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordConfirmedRef,\n    placeholder: \"Leave blank to keep the same\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-1\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    as: Link,\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Cancel\")))));\n}","map":{"version":3,"sources":["/home/andre/Documents/GithubRepos/Group_06/client/src/components/UpdateAccount.js"],"names":["React","useState","useRef","Alert","Button","Card","Form","Link","useHistory","useAuth","UpdateAccount","emailRef","passwordRef","passwordConfirmedRef","error","setError","currentUser","updatePassword","updateEmail","history","handleSubmit","e","preventDefault","current","value","promises","email","push","Promise","all","then","catch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Alert, Button, Card, Form } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function UpdateAccount() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmedRef = useRef();\n\n  const [error, setError] = useState(\"\");\n\n  const { currentUser, updatePassword, updateEmail } = useAuth();\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\n      return setError(\"Passwords do not match.\");\n    }\n\n    const promises = [];\n\n    setError(\"\");\n\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    Promise.all(promises)\n      .then(() => history.push(\"/\"))\n      .catch(() => {\n        setError(\"Failed to update account.\");\n      });\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Update Profile</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                ref={emailRef}\n                required\n                defaultValue={currentUser.email}\n              />\n            </Form.Group>\n            <Form.Group id=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Form.Group id=\"password-confirm\">\n              <Form.Label>Password Confirmation</Form.Label>\n              <Form.Control\n                type=\"password\"\n                ref={passwordConfirmedRef}\n                placeholder=\"Leave blank to keep the same\"\n              />\n            </Form.Group>\n            <Button className=\"mr-1\" type=\"submit\">\n              Update\n            </Button>\n            <Button variant=\"secondary\" as={Link} to=\"/\">\n              Cancel\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}