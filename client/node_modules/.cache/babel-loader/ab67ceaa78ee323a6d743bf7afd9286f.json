{"ast":null,"code":"import _slicedToArray from\"/home/andre/Documents/GithubRepos/Group_06/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useRef}from\"react\";import{Alert,Button,Container,Form}from\"react-bootstrap\";import{Link,useHistory}from\"react-router-dom\";import FormGroupPostal from\"../components/FormGroupPostal\";import FormGroupProvince from\"../components/FormGroupProvince\";import{useAuth}from\"../contexts/AuthContext\";export default function UpdateAccount(){var emailRef=useRef();var passwordRef=useRef();var passwordConfirmedRef=useRef();var streetRef=useRef();var cityRef=useRef();var provinceRef=useRef();var postalCodeRef=useRef();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useAuth=useAuth(),currentUser=_useAuth.currentUser,updatePassword=_useAuth.updatePassword,updateEmail=_useAuth.updateEmail,updateAddress=_useAuth.updateAddress;var history=useHistory();function handleSubmit(e){e.preventDefault();if(passwordRef.current.value!==passwordConfirmedRef.current.value){return setError(\"Passwords do not match.\");}var promises=[];setError(\"\");if(emailRef.current.value!==currentUser.email){promises.push(updateEmail(emailRef.current.value));}if(passwordRef.current.value){promises.push(updatePassword(passwordRef.current.value));}var address={};if(streetRef.current.value!==currentUser.street){address.street=streetRef.current.value;}if(cityRef.current.value!==currentUser.city){address.city=cityRef.current.value;}if(provinceRef.current.value!==currentUser.province){address.province=provinceRef.current.value;}if(postalCodeRef.current.value!==currentUser.postalCode){address.postalCode=postalCodeRef.current.value;}if(Object.keys(address).length>0){promises.push(updateAddress(address));}Promise.all(promises).then(function(){return history.push(\"/\");}).catch(function(){setError(\"Failed to update account.\");});}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Container,{className:\"mb-4\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"text-center mb-4\"},\"Update Profile\"),error&&/*#__PURE__*/React.createElement(Alert,{variant:\"danger\"},error),/*#__PURE__*/React.createElement(Form,{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(Form.Group,{id:\"email\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Email\"),/*#__PURE__*/React.createElement(Form.Control,{type:\"email\",ref:emailRef,required:true,defaultValue:currentUser.email})),/*#__PURE__*/React.createElement(Form.Group,{id:\"password\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Password\"),/*#__PURE__*/React.createElement(Form.Control,{type:\"password\",ref:passwordRef,placeholder:\"Leave blank to keep the same\"})),/*#__PURE__*/React.createElement(Form.Group,{id:\"passwordConfirm\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Password Confirmation\"),/*#__PURE__*/React.createElement(Form.Control,{type:\"password\",ref:passwordConfirmedRef,placeholder:\"Leave blank to keep the same\"})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Form.Group,{id:\"street\"},/*#__PURE__*/React.createElement(Form.Label,null,\"Street Address\"),/*#__PURE__*/React.createElement(Form.Control,{defaultValue:currentUser.street,ref:streetRef})),/*#__PURE__*/React.createElement(Form.Group,{id:\"city\"},/*#__PURE__*/React.createElement(Form.Label,null,\"City\"),/*#__PURE__*/React.createElement(Form.Control,{defaultValue:currentUser.city,ref:cityRef})),/*#__PURE__*/React.createElement(FormGroupProvince,{currentUser:currentUser,provinceRef:provinceRef}),/*#__PURE__*/React.createElement(FormGroupPostal,{currentUser:currentUser,postalCodeRef:postalCodeRef}),/*#__PURE__*/React.createElement(Button,{className:\"mr-1\",type:\"submit\"},\"Update\"),/*#__PURE__*/React.createElement(Button,{variant:\"secondary\",as:Link,to:\"/\"},\"Cancel\"))));}","map":{"version":3,"sources":["/home/andre/Documents/GithubRepos/Group_06/client/src/pages/UpdateAccount.js"],"names":["React","useState","useRef","Alert","Button","Container","Form","Link","useHistory","FormGroupPostal","FormGroupProvince","useAuth","UpdateAccount","emailRef","passwordRef","passwordConfirmedRef","streetRef","cityRef","provinceRef","postalCodeRef","error","setError","currentUser","updatePassword","updateEmail","updateAddress","history","handleSubmit","e","preventDefault","current","value","promises","email","push","address","street","city","province","postalCode","Object","keys","length","Promise","all","then","catch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Alert, Button, Container, Form } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport FormGroupPostal from \"../components/FormGroupPostal\";\nimport FormGroupProvince from \"../components/FormGroupProvince\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function UpdateAccount() {\n  const emailRef = useRef();\n\n  const passwordRef = useRef();\n  const passwordConfirmedRef = useRef();\n\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const provinceRef = useRef();\n  const postalCodeRef = useRef();\n\n  const [error, setError] = useState(\"\");\n\n  const { currentUser, updatePassword, updateEmail, updateAddress } = useAuth();\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\n      return setError(\"Passwords do not match.\");\n    }\n\n    const promises = [];\n\n    setError(\"\");\n\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    let address = {};\n\n    if (streetRef.current.value !== currentUser.street) {\n      address.street = streetRef.current.value;\n    }\n\n    if (cityRef.current.value !== currentUser.city) {\n      address.city = cityRef.current.value;\n    }\n\n    if (provinceRef.current.value !== currentUser.province) {\n      address.province = provinceRef.current.value;\n    }\n\n    if (postalCodeRef.current.value !== currentUser.postalCode) {\n      address.postalCode = postalCodeRef.current.value;\n    }\n\n    if (Object.keys(address).length > 0) {\n      promises.push(updateAddress(address));\n    }\n\n    Promise.all(promises)\n      .then(() => history.push(\"/\"))\n      .catch(() => {\n        setError(\"Failed to update account.\");\n      });\n  }\n\n  return (\n    <>\n      <Container className=\"mb-4\">\n        <h2 className=\"text-center mb-4\">Update Profile</h2>\n        {error && <Alert variant=\"danger\">{error}</Alert>}\n        <Form onSubmit={handleSubmit}>\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              ref={emailRef}\n              required\n              defaultValue={currentUser.email}\n            />\n          </Form.Group>\n\n          <Form.Group id=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              ref={passwordRef}\n              placeholder=\"Leave blank to keep the same\"\n            />\n          </Form.Group>\n\n          <Form.Group id=\"passwordConfirm\">\n            <Form.Label>Password Confirmation</Form.Label>\n            <Form.Control\n              type=\"password\"\n              ref={passwordConfirmedRef}\n              placeholder=\"Leave blank to keep the same\"\n            />\n          </Form.Group>\n\n          <hr />\n\n          <Form.Group id=\"street\">\n            <Form.Label>Street Address</Form.Label>\n            <Form.Control defaultValue={currentUser.street} ref={streetRef} />\n          </Form.Group>\n\n          <Form.Group id=\"city\">\n            <Form.Label>City</Form.Label>\n            <Form.Control defaultValue={currentUser.city} ref={cityRef} />\n          </Form.Group>\n\n          <FormGroupProvince\n            currentUser={currentUser}\n            provinceRef={provinceRef}\n          />\n\n          <FormGroupPostal\n            currentUser={currentUser}\n            postalCodeRef={postalCodeRef}\n          />\n\n          <Button className=\"mr-1\" type=\"submit\">\n            Update\n          </Button>\n          <Button variant=\"secondary\" as={Link} to=\"/\">\n            Cancel\n          </Button>\n        </Form>\n      </Container>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}