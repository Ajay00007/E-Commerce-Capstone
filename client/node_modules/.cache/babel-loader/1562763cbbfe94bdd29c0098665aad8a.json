{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/GithubRepos/Group_06/client/src/contexts/CartContext.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { APIpaths } from \"../API\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nconst CartContext = React.createContext();\nexport function useCart() {\n  return useContext(CartContext);\n}\nexport function CartProvider({\n  children\n}) {\n  const [cartItems, setCartItems] = useLocalStorage(\"cart-items\", []);\n  const [loading, setLoading] = useState(true);\n\n  async function addToCart(productId) {\n    const existingItem = cartItems.find(item => item._id === productId);\n\n    if (existingItem) {\n      setCartItems(cartItems.map(item => item._id === productId ? { ...existingItem,\n        qty: existingItem.qty + 1\n      } : existingItem));\n    } else {\n      try {\n        const product = await axios.get(`${APIpaths.getOneItem}${productId}`);\n        setCartItems([...cartItems, { ...product.data,\n          qty: 1\n        }]);\n        setLoading(false);\n      } catch (error) {\n        return;\n      }\n    }\n  }\n\n  function removeFromCart(productId) {\n    const existingItem = cartItems.find(item => item._id === productId);\n\n    if (existingItem.qty === 1) {\n      setCartItems(cartItems.filter(item => item._id === productId));\n    } else {\n      setCartItems(cartItems.map(item => item._id === productId ? { ...existingItem,\n        qty: existingItem.qty - 1\n      } : existingItem));\n    }\n  }\n\n  useEffect(() => {\n    setCartItems(cartItems);\n    setLoading(false);\n  }, [cartItems, setCartItems]);\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart\n  };\n  return /*#__PURE__*/React.createElement(CartContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, !loading && children);\n}","map":{"version":3,"sources":["/home/andre/Documents/GithubRepos/Group_06/client/src/contexts/CartContext.js"],"names":["React","useContext","useEffect","useState","axios","APIpaths","useLocalStorage","CartContext","createContext","useCart","CartProvider","children","cartItems","setCartItems","loading","setLoading","addToCart","productId","existingItem","find","item","_id","map","qty","product","get","getOneItem","data","error","removeFromCart","filter","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAOR,UAAU,CAACM,WAAD,CAAjB;AACD;AAED,OAAO,SAASG,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,eAAe,CAAC,YAAD,EAAe,EAAf,CAAjD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,iBAAea,SAAf,CAAyBC,SAAzB,EAAoC;AAClC,UAAMC,YAAY,GAAGN,SAAS,CAACO,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,SAAtC,CAArB;;AACA,QAAIC,YAAJ,EAAkB;AAChBL,MAAAA,YAAY,CACVD,SAAS,CAACU,GAAV,CAAeF,IAAD,IACZA,IAAI,CAACC,GAAL,KAAaJ,SAAb,GACI,EAAE,GAAGC,YAAL;AAAmBK,QAAAA,GAAG,EAAEL,YAAY,CAACK,GAAb,GAAmB;AAA3C,OADJ,GAEIL,YAHN,CADU,CAAZ;AAOD,KARD,MAQO;AACL,UAAI;AACF,cAAMM,OAAO,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEpB,QAAQ,CAACqB,UAAW,GAAET,SAAU,EAA7C,CAAtB;AACAJ,QAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe,EAAE,GAAGY,OAAO,CAACG,IAAb;AAAmBJ,UAAAA,GAAG,EAAE;AAAxB,SAAf,CAAD,CAAZ;AACAR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAJD,CAIE,OAAOa,KAAP,EAAc;AACd;AACD;AACF;AACF;;AAED,WAASC,cAAT,CAAwBZ,SAAxB,EAAmC;AACjC,UAAMC,YAAY,GAAGN,SAAS,CAACO,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,SAAtC,CAArB;;AAEA,QAAIC,YAAY,CAACK,GAAb,KAAqB,CAAzB,EAA4B;AAC1BV,MAAAA,YAAY,CAACD,SAAS,CAACkB,MAAV,CAAkBV,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,SAAxC,CAAD,CAAZ;AACD,KAFD,MAEO;AACLJ,MAAAA,YAAY,CACVD,SAAS,CAACU,GAAV,CAAeF,IAAD,IACZA,IAAI,CAACC,GAAL,KAAaJ,SAAb,GACI,EAAE,GAAGC,YAAL;AAAmBK,QAAAA,GAAG,EAAEL,YAAY,CAACK,GAAb,GAAmB;AAA3C,OADJ,GAEIL,YAHN,CADU,CAAZ;AAOD;AACF;;AAEDhB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHQ,EAGN,CAACH,SAAD,EAAYC,YAAZ,CAHM,CAAT;AAKA,QAAMkB,KAAK,GAAG;AACZnB,IAAAA,SADY;AAEZI,IAAAA,SAFY;AAGZa,IAAAA;AAHY,GAAd;AAMA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACjB,OAAD,IAAYH,QADf,CADF;AAKD","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { APIpaths } from \"../API\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst CartContext = React.createContext();\n\nexport function useCart() {\n  return useContext(CartContext);\n}\n\nexport function CartProvider({ children }) {\n  const [cartItems, setCartItems] = useLocalStorage(\"cart-items\", []);\n  const [loading, setLoading] = useState(true);\n\n  async function addToCart(productId) {\n    const existingItem = cartItems.find((item) => item._id === productId);\n    if (existingItem) {\n      setCartItems(\n        cartItems.map((item) =>\n          item._id === productId\n            ? { ...existingItem, qty: existingItem.qty + 1 }\n            : existingItem\n        )\n      );\n    } else {\n      try {\n        const product = await axios.get(`${APIpaths.getOneItem}${productId}`);\n        setCartItems([...cartItems, { ...product.data, qty: 1 }]);\n        setLoading(false);\n      } catch (error) {\n        return;\n      }\n    }\n  }\n\n  function removeFromCart(productId) {\n    const existingItem = cartItems.find((item) => item._id === productId);\n\n    if (existingItem.qty === 1) {\n      setCartItems(cartItems.filter((item) => item._id === productId));\n    } else {\n      setCartItems(\n        cartItems.map((item) =>\n          item._id === productId\n            ? { ...existingItem, qty: existingItem.qty - 1 }\n            : existingItem\n        )\n      );\n    }\n  }\n\n  useEffect(() => {\n    setCartItems(cartItems);\n    setLoading(false);\n  }, [cartItems, setCartItems]);\n\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {!loading && children}\n    </CartContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}