{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/GithubRepos/Group_06/client/src/pages/UpdateAccount.js\";\nimport React, { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Alert, Button, Container, Form } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport FormGroupPostal from \"../components/FormGroupPostal\";\nimport FormGroupProvince from \"../components/FormGroupProvince\";\nimport { useAuth } from \"../contexts/AuthContext\";\nexport default function UpdateAccount() {\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const passwordConfirmedRef = useRef();\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const provinceRef = useRef();\n  const postalCodeRef = useRef();\n  const [error, setError] = useState(\"\");\n  const {\n    currentUser,\n    updatePassword,\n    updateEmail,\n    updateAddress\n  } = useAuth();\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\n      return setError(\"Passwords do not match.\");\n    }\n\n    const promises = [];\n    setError(\"\");\n\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    let address = {};\n\n    if (streetRef.current.value !== currentUser.street) {\n      address.street = streetRef.current.value;\n    }\n\n    if (cityRef.current.value !== currentUser.city) {\n      address.city = cityRef.current.value;\n    }\n\n    if (provinceRef.current.value !== currentUser.province) {\n      address.province = provinceRef.current.value;\n    }\n\n    if (postalCodeRef.current.value !== currentUser.postalCode) {\n      address.postalCode = postalCodeRef.current.value;\n    }\n\n    if (Object.keys(address).length > 0) {\n      promises.push(updateAddress(address));\n    }\n\n    Promise.all(promises).then(() => history.push(\"/\")).catch(() => {\n      setError(\"Failed to update account.\");\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Update Profile\"), error && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, error), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    ref: emailRef,\n    required: true,\n    defaultValue: currentUser.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordRef,\n    placeholder: \"Leave blank to keep the same\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"passwordConfirm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Password Confirmation\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    ref: passwordConfirmedRef,\n    placeholder: \"Leave blank to keep the same\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"street\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Street Address\"), /*#__PURE__*/React.createElement(Form.Control, {\n    defaultValue: currentUser.street,\n    ref: streetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    id: \"city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"City\"), /*#__PURE__*/React.createElement(Form.Control, {\n    defaultValue: currentUser.city,\n    ref: cityRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroupProvince, {\n    currentUser: currentUser,\n    provinceRef: provinceRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormGroupPostal, {\n    currentUser: currentUser,\n    postalCodeRef: postalCodeRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"mr-1\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    as: Link,\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n}","map":{"version":3,"sources":["/home/andre/Documents/GithubRepos/Group_06/client/src/pages/UpdateAccount.js"],"names":["React","useState","useRef","Alert","Button","Container","Form","Link","useHistory","FormGroupPostal","FormGroupProvince","useAuth","UpdateAccount","emailRef","passwordRef","passwordConfirmedRef","streetRef","cityRef","provinceRef","postalCodeRef","error","setError","currentUser","updatePassword","updateEmail","updateAddress","history","handleSubmit","e","preventDefault","current","value","promises","email","push","address","street","city","province","postalCode","Object","keys","length","Promise","all","then","catch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Alert, Button, Container, Form } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport FormGroupPostal from \"../components/FormGroupPostal\";\nimport FormGroupProvince from \"../components/FormGroupProvince\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nexport default function UpdateAccount() {\n  const emailRef = useRef();\n\n  const passwordRef = useRef();\n  const passwordConfirmedRef = useRef();\n\n  const streetRef = useRef();\n  const cityRef = useRef();\n  const provinceRef = useRef();\n  const postalCodeRef = useRef();\n\n  const [error, setError] = useState(\"\");\n\n  const { currentUser, updatePassword, updateEmail, updateAddress } = useAuth();\n  const history = useHistory();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\n      return setError(\"Passwords do not match.\");\n    }\n\n    const promises = [];\n\n    setError(\"\");\n\n    if (emailRef.current.value !== currentUser.email) {\n      promises.push(updateEmail(emailRef.current.value));\n    }\n\n    if (passwordRef.current.value) {\n      promises.push(updatePassword(passwordRef.current.value));\n    }\n\n    let address = {};\n\n    if (streetRef.current.value !== currentUser.street) {\n      address.street = streetRef.current.value;\n    }\n\n    if (cityRef.current.value !== currentUser.city) {\n      address.city = cityRef.current.value;\n    }\n\n    if (provinceRef.current.value !== currentUser.province) {\n      address.province = provinceRef.current.value;\n    }\n\n    if (postalCodeRef.current.value !== currentUser.postalCode) {\n      address.postalCode = postalCodeRef.current.value;\n    }\n\n    if (Object.keys(address).length > 0) {\n      promises.push(updateAddress(address));\n    }\n\n    Promise.all(promises)\n      .then(() => history.push(\"/\"))\n      .catch(() => {\n        setError(\"Failed to update account.\");\n      });\n  }\n\n  return (\n    <>\n      <Container>\n        <h2 className=\"text-center mb-4\">Update Profile</h2>\n        {error && <Alert variant=\"danger\">{error}</Alert>}\n        <Form onSubmit={handleSubmit}>\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              ref={emailRef}\n              required\n              defaultValue={currentUser.email}\n            />\n          </Form.Group>\n\n          <Form.Group id=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              ref={passwordRef}\n              placeholder=\"Leave blank to keep the same\"\n            />\n          </Form.Group>\n\n          <Form.Group id=\"passwordConfirm\">\n            <Form.Label>Password Confirmation</Form.Label>\n            <Form.Control\n              type=\"password\"\n              ref={passwordConfirmedRef}\n              placeholder=\"Leave blank to keep the same\"\n            />\n          </Form.Group>\n\n          <hr />\n\n          <Form.Group id=\"street\">\n            <Form.Label>Street Address</Form.Label>\n            <Form.Control defaultValue={currentUser.street} ref={streetRef} />\n          </Form.Group>\n\n          <Form.Group id=\"city\">\n            <Form.Label>City</Form.Label>\n            <Form.Control defaultValue={currentUser.city} ref={cityRef} />\n          </Form.Group>\n\n          <FormGroupProvince\n            currentUser={currentUser}\n            provinceRef={provinceRef}\n          />\n\n          <FormGroupPostal\n            currentUser={currentUser}\n            postalCodeRef={postalCodeRef}\n          />\n\n          <Button className=\"mr-1\" type=\"submit\">\n            Update\n          </Button>\n          <Button variant=\"secondary\" as={Link} to=\"/\">\n            Cancel\n          </Button>\n        </Form>\n      </Container>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}