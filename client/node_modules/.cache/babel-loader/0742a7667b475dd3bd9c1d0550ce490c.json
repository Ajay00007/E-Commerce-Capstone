{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documents/GithubRepos/Group_06/client/src/contexts/AuthContext.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { APIpaths } from \"../API\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nconst AuthContext = React.createContext();\nexport function useAuth() {\n  return useContext(AuthContext);\n}\nexport function AuthProvider({\n  children\n}) {\n  const [currentUser, setCurrentUser] = useState();\n  const [isAdmin, setIsAdmin] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [authToken, setAuthToken] = useLocalStorage(\"auth-token\", null);\n\n  async function register(name, email, password, street, city, province, postalCode) {\n    const res = await axios.post(APIpaths.registerUser, {\n      name,\n      email,\n      password,\n      street,\n      city,\n      province,\n      postalCode\n    });\n    setCurrentUser(res.data.user);\n    setAuthToken(res.data.token);\n  }\n\n  async function login(email, password) {\n    const res = await axios.post(APIpaths.loginUser, {\n      email,\n      password\n    });\n    setCurrentUser(res.data.user);\n    setAuthToken(res.data.token);\n  }\n\n  async function loginAdmin(email, password) {\n    const res = await axios.post(APIpaths.loginAdmin, {\n      email,\n      password\n    });\n    setCurrentUser(res.data.user);\n    setIsAdmin(true);\n    setAuthToken(res.data.token);\n  }\n\n  function logout() {\n    setCurrentUser(undefined);\n    setAuthToken(null);\n  }\n\n  async function getUserFromToken(tokenValue) {\n    try {\n      const res = await axios.get(APIpaths.getUser, {\n        headers: {\n          \"x-auth-token\": tokenValue\n        }\n      });\n      setCurrentUser(res.data);\n    } catch (error) {\n      return;\n    }\n  }\n\n  async function updateEmail(email) {\n    const data = {\n      email\n    };\n    const config = {\n      headers: {\n        \"x-auth-token\": authToken\n      }\n    };\n    const res = await axios.put(APIpaths.updateEmail, data, config);\n    setCurrentUser(res.data);\n  }\n\n  async function updatePassword(password) {\n    const data = {\n      password\n    };\n    const config = {\n      headers: {\n        \"x-auth-token\": authToken\n      }\n    };\n    await axios.put(APIpaths.updatePass, data, config);\n  }\n\n  async function updateAddress(address) {\n    const data = address;\n    const config = {\n      headers: {\n        \"x-auth-token\": authToken\n      }\n    };\n    const res = await axios.put(APIpaths.updateAddress, data, config);\n    setCurrentUser(res.data);\n  }\n\n  useEffect(() => {\n    if (!currentUser && authToken !== null) getUserFromToken(authToken);\n    setCurrentUser(currentUser);\n    setLoading(false);\n  }, [authToken, currentUser]);\n  const value = {\n    currentUser,\n    isAdmin,\n    login,\n    loginAdmin,\n    register,\n    logout,\n    updateEmail,\n    updatePassword,\n    updateAddress\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, !loading && children);\n}","map":{"version":3,"sources":["/home/andre/Documents/GithubRepos/Group_06/client/src/contexts/AuthContext.js"],"names":["React","useContext","useEffect","useState","axios","APIpaths","useLocalStorage","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","isAdmin","setIsAdmin","loading","setLoading","authToken","setAuthToken","register","name","email","password","street","city","province","postalCode","res","post","registerUser","data","user","token","login","loginUser","loginAdmin","logout","undefined","getUserFromToken","tokenValue","get","getUser","headers","error","updateEmail","config","put","updatePassword","updatePass","updateAddress","address","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { APIpaths } from \"../API\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState();\n  const [isAdmin, setIsAdmin] = useState(true);\n  const [loading, setLoading] = useState(true);\n\n  const [authToken, setAuthToken] = useLocalStorage(\"auth-token\", null);\n\n  async function register(\n    name,\n    email,\n    password,\n    street,\n    city,\n    province,\n    postalCode\n  ) {\n    const res = await axios.post(APIpaths.registerUser, {\n      name,\n      email,\n      password,\n      street,\n      city,\n      province,\n      postalCode,\n    });\n\n    setCurrentUser(res.data.user);\n    setAuthToken(res.data.token);\n  }\n\n  async function login(email, password) {\n    const res = await axios.post(APIpaths.loginUser, {\n      email,\n      password,\n    });\n    setCurrentUser(res.data.user);\n    setAuthToken(res.data.token);\n  }\n\n  async function loginAdmin(email, password) {\n    const res = await axios.post(APIpaths.loginAdmin, {\n      email,\n      password,\n    });\n    setCurrentUser(res.data.user);\n    setIsAdmin(true);\n    setAuthToken(res.data.token);\n  }\n\n  function logout() {\n    setCurrentUser(undefined);\n    setAuthToken(null);\n  }\n\n  async function getUserFromToken(tokenValue) {\n    try {\n      const res = await axios.get(APIpaths.getUser, {\n        headers: { \"x-auth-token\": tokenValue },\n      });\n      setCurrentUser(res.data);\n    } catch (error) {\n      return;\n    }\n  }\n\n  async function updateEmail(email) {\n    const data = { email };\n    const config = { headers: { \"x-auth-token\": authToken } };\n\n    const res = await axios.put(APIpaths.updateEmail, data, config);\n\n    setCurrentUser(res.data);\n  }\n\n  async function updatePassword(password) {\n    const data = { password };\n    const config = { headers: { \"x-auth-token\": authToken } };\n\n    await axios.put(APIpaths.updatePass, data, config);\n  }\n\n  async function updateAddress(address) {\n    const data = address;\n    const config = { headers: { \"x-auth-token\": authToken } };\n\n    const res = await axios.put(APIpaths.updateAddress, data, config);\n\n    setCurrentUser(res.data);\n  }\n\n  useEffect(() => {\n    if (!currentUser && authToken !== null) getUserFromToken(authToken);\n    setCurrentUser(currentUser);\n    setLoading(false);\n  }, [authToken, currentUser]);\n\n  const value = {\n    currentUser,\n    isAdmin,\n    login,\n    loginAdmin,\n    register,\n    logout,\n    updateEmail,\n    updatePassword,\n    updateAddress,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}